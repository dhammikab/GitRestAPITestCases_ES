<html>
<META http-equiv="content-type" content="text/html; charset=utf-8">

<body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-drilldown vertical menu off-canvas-list" data-drilldown="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-drilldown-submenu-parent" data-mc-css-tree-node-collapsed="is-drilldown-submenu-parent" data-mc-css-sub-menu="vertical menu slide-in-right is-drilldown-submenu" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="True" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.drilldown" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div>
                        <nav class="title-bar tab-bar" role="banner" data-mc-ignore="true"><a class="skip-to-content fluid-skip showOnFocus" href="#">Ir al contenido principal</a><div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <div class="central-account-wrapper">
                                        <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Cuenta</span></a><div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Ajustes</a><hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Cerrar sesi&oacute;n</a></div>
                                        </div>
                                    </div>
                                    <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas"><span></span></button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../../-/-/-/welcome_page.htm" alt="Logo"></a></div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" role="navigation" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="2" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>marcador de posici&oacute;n</a></li>
                                    </ul>
                                </div>
                                <div class="central-account-wrapper">
                                    <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Cuenta</span></a><div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Ajustes</a><hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Cerrar sesi&oacute;n</a></div>
                                    </div>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search" />
                                                <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filtro:</span><div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="Todos los archivos" role="button" tabindex="0">
                                                    </div>
                                                    <div class="search-filter-content" id="sf-content">
                                                        <ul>
                                                            <li>
                                                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">Todos los archivos</span></button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Buscar" role="button" tabindex="0"><span class="invisible-label">Enviar b&uacute;squeda</span></div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <div class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <nav class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </nav>
                            <div class="body-container">
                                <div data-mc-content-body="True">
                                    <div class="content">
                                        <div id="contentBody">
                                            <div class="row collapse">
                                                <div role="navigation" aria-label="Topic toolbar buttons" class="sideContent">
                                                    <div class="clearfix">
                                                        <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent" style="mc-topic-toolbar-items: ;">
                                                            <div class="button-group-container-left">
                                                                <button class="button needs-pie previous-topic-button" title="Navegar anterior" disabled="true">
                                                                    <div>
                                                                        <div role="img" class="button-icon-wrapper" aria-label="Navigate previous">
                                                                            <div class="button-icon"></div>
                                                                        </div>
                                                                    </div>
                                                                </button>
                                                                <button class="button needs-pie next-topic-button" title="Navegar a continuaci&oacute;n" disabled="true">
                                                                    <div>
                                                                        <div role="img" class="button-icon-wrapper" aria-label="Navigate next">
                                                                            <div class="button-icon"></div>
                                                                        </div>
                                                                    </div>
                                                                </button>
                                                                <button class="button needs-pie print-button" title="Imprimir">
                                                                    <div>
                                                                        <div role="img" class="button-icon-wrapper" aria-label="Print">
                                                                            <div class="button-icon"></div>
                                                                        </div>
                                                                    </div>
                                                                </button>
                                                                <button class="button needs-pie select-language-button" title="Cambiar idioma">
                                                                    <div>
                                                                        <div role="img" class="button-icon-wrapper" aria-label="Change language">
                                                                            <div class="button-icon"></div>
                                                                        </div>
                                                                    </div>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <ul class="nocontent menu _Skins_SideMenu mc-component" data-mc-is-context-sensitive="True" data-mc-linked-toc="Data/Tocs/Brightspace_Help_TOC.js" data-mc-side-menu="True" data-mc-max-depth="1" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="False" data-mc-include-parent="True" data-mc-toc="True">
                                                    </ul>
                                                </div>
                                                <div class="nocontent">
                                                    <div class="MCBreadcrumbsBox_0 breadcrumbs" role="navigation" aria-label="Breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">Usted est&aacute; aqu&iacute;:</span></div>
                                                </div>
                                                <div role="main" id="mc-main-content">
                                                    <h1>Env&iacute;e una asignaci&oacute;n</h1>
                                                    <p>La herramienta Asignaciones le permite enviar asignaciones en Brightspace Learning Environment, eliminando la necesidad de enviar por correo, fax o correo electr&oacute;nico su trabajo a los instructores. Simplemente cargue su env&iacute;o a la asignaci&oacute;n apropiada y env&iacute;elo.</p>
                                                    <h2>Comprender las fechas de vencimiento y las fechas de finalizaci&oacute;n</h2>
                                                    <p class="bodytext">Una fecha l&iacute;mite es la fecha l&iacute;mite de env&iacute;o de una asignaci&oacute;n en su curso. Esta fecha es espec&iacute;fica s&oacute;lo para las asignaciones.</p>
                                                    <p class="bodytext">Las fechas de finalizaci&oacute;n se adjuntan a las asignaciones. La fecha de finalizaci&oacute;n es la fecha final a la que est&aacute; disponible una asignaci&oacute;n para enviarla, independientemente de la fecha de vencimiento. Una vez pasada la fecha de finalizaci&oacute;n de la asignaci&oacute;n, ya no podr&aacute; enviarla, independientemente de la fecha de vencimiento de la asignaci&oacute;n.</p>
                                                    <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="#" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage" aria-expanded="false"><img class="MCDropDown_Image_Icon" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Mostrar" data-mc-alt2="Hide" />Para enviar asignaciones</a></span><div class="MCDropDownBody dropDownBody">
                                                            <ol class="step">
                                                                <li class="step" value="1">En la barra de navegaci&oacute;n, haga clic en <span class="uicontrol">Asignaciones</span>.</li>
                                                                <li class="step" value="2">En <span class="uicontrol">la p&aacute;gina Asignaciones </span>, haga clic en la asignaci&oacute;n a la que desea enviar.</li>
                                                                <li value="3">
                                                                    <p>Siga las instrucciones de asignaci&oacute;n y realice una de las siguientes acciones:</p>
                                                                </li>
                                                                <ul>
                                                                    <li>
                                                                        <p>Escriba la asignaci&oacute;n directamente en <b>el campo Env&iacute;o de texto</b> . Cuando termine la respuesta escrita, haga clic en <b>Enviar</b>.</p>
                                                                    </li>
                                                                    <li class="step">Para buscar el archivo que desea enviar, haga clic en <span class="uicontrol">Agregar un archivo</span>. Puede adjuntar archivos desde su equipo local o dispositivo de almacenamiento, un casillero personal, un casillero de grupo o Brightspace ePortfolio. Introduzca los comentarios que desee enviar con el archivo. Haga clic en <b>Enviar</b>.</li>
                                                                    <li class="step">Puede seleccionar <span class="uicontrol">Grabar audio</span> para a&ntilde;adir comentarios. Cuando termine una grabaci&oacute;n, haga clic en<span class="uicontrol"> Agregar</span>. Introduzca los comentarios que desee enviar con el archivo. Haga clic en <b>Enviar</b>.</li>
                                                                    <li class="step">Haga clic en <b>Marcar como completada</b> para marcar manualmente una asignaci&oacute;n como completada.</li>
                                                                </ul>
                                                                <li class="step" value="4">Si el instructor ha habilitado la informaci&oacute;n gramatical de e-rater ®, para ver la informaci&oacute;n gramatical de la asignaci&oacute;n, en <b>la p&aacute;gina Historial de presentaciones</b> , haga clic en <b>el enlace Ver la informaci&oacute;n gramatical de e-rater®</b> de <b>la columna Comentarios en l&iacute;nea</b> .<ul><li class="step">Si su asignaci&oacute;n permite varios env&iacute;os, puede incorporar cualquier comentario gramatical y volver a enviar su asignaci&oacute;n.</li></ul></li>
                                                            </ol>
                                                            <p class="step"><b>Notas:</b></p>
                                                            <ul>
                                                                <li>Si la asignaci&oacute;n est&aacute; habilitada para Turnitin, el archivo que ha enviado se validar&aacute; previamente en el momento del env&iacute;o para asegurarse de que se encuentra dentro de los requisitos de tama&ntilde;o y tipo de archivo de Turnitin.</li>
                                                                <li>Si se ha activado GradeMark o OriginalityCheck, puede ver su <b>ID de env&iacute;o</b> en <b>la p&aacute;gina Historial de env&iacute;os</b> .</li>
                                                                <li>En funci&oacute;n de la configuraci&oacute;n del curso, puede ver cualquier r&uacute;brica que se utilice para evaluar su trabajo directamente en la p&aacute;gina de env&iacute;o.</li>
                                                            </ul>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div role="contentinfo" aria-label="D2L legal and trademark information" class="footer center">
                                                    <div class="HomeMasterPageFooter outer-row">
                                                        <div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 8pt;">La familia de empresas D2L incluye D2L Corporation, D2L Ltd, D2L Australia Pty Ltd, D2L Europe Ltd, D2L Asia Pte Ltd y D2L Brasil Solu&ccedil;&otilde;es de Tecnologia para Educa&ccedil;&atilde;o Ltda.<br />© 1999-2022 D2L Corporaci&oacute;n.<br /><span style="font-size: 10pt;"><span style="font-size: 8pt;">Brightspace, D2L y otras marcas (D2L marcas) son marcas comerciales de D2L Corporation, registradas en EE.UU. Y en otros pa&iacute;ses. Visite </span><a href="http://www.d2l.com/trademarks" style="font-size: 8pt;">www.d2l.com/trademarks</a><span style="font-size: 8pt;"> para obtener una lista de otras D2L marcas.</span></span></div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div><a data-close="true"></a></div>
            </div>
        </div>
    </body>
</html>

